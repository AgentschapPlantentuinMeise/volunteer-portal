import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.grails.plugins:hibernate5:6.0.7"
    }
}

//plugins {
//    id "com.moowork.node" version "1.1.1"
//}

version "4.0-SNAPSHOT"
group "au.org.ala"
description "Digivol application"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"maven-publish"

//ext {
//    set "tomcat.version", "8.5.11" // force this version due to a conflict between hibernate and tomcat 8.5.9, remove when upgrading grails version to 3.2.5+
//}

repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // Grails 3.2.4
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.2.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.2.Final"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
//    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile "org.grails.plugins:grails-java8"
    compile "org.grails.plugins:rxjava:2.0.0.ALA-SNAPSHOT"
    compile "org.hibernate:hibernate-java8:5.1.2.Final"

    // Additional Plugins
    compile 'org.grails.plugins:cache:3.0.3'
//    compile 'org.grails.plugins:cache-headers:2.0.0.ALA-SNAPSHOT'
    compile 'org.grails.plugins:csv:1.0'
//    compile 'org.grails.plugins:postgresql-extensions:4.6.6' // check if needed
    compile 'org.grails.plugins:mail:2.0.0.RC6'
    compile 'org.grails.plugins:grails-executor:0.4' // used in TaskLoadService.backgroundProcessQueue
    compile 'org.grails.plugins:grails-markdown:3.0.0' // may need modifications?
    compile 'org.grails.plugins:grails-pretty-time:4.0.0' // may need modifications?
    compile 'org.grails.plugins:quartz:2.0.9'
    compile 'org.grails.plugins:grails-google-visualization:2.2'
    // TODO ALA Plugins: image service (is it used anywhere?)
    compile 'org.grails.plugins:ala-auth:3.0.0-SNAPSHOT'
    // TODO Collection Event Controller?

    // BOOTSTRAP, FONT-AWESOME?  NPM?  Yarn? webjars ?
//    compile 'org.webjars:bootstrap:3.3.7-1'
//    compile 'org.webjars:angularjs:1.6.1'
//    compile 'org.webjars:font-awesome:4.7.0'

    // Dependencies
    runtime 'org.postgresql:postgresql:9.4.1212'
    compile 'org.imgscalr:imgscalr-lib:4.2'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.commons:commons-compress:1.11'
    compile 'org.apache.commons:commons-pool2:2.4.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile 'org.elasticsearch:elasticsearch:1.3.5'
    // optional for elastic search, version should match elastic search optional dep
    compile group: 'org.apache.lucene', name: 'lucene-expressions', version: '4.9.1'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'org.freemarker:freemarker:2.3.23'
    compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20160526.1-ALA'
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
}

bootRepackage {
    enabled = true
    executable = true
//    classifier = 'exec'

    embeddedLaunchScriptProperties = [
                    initInfoDescription: project.description,
                    initInfoShortDescription: project.name,
                    initInfoProvides: jar.baseName,
//                    mode: 'service'
            ]
}

assets {
    minifyJs = true
    minifyCss = true
    excludes = ['codemirror/**/*.html', "**/*.min.js", "**/*.min.css", "angular/*/i18n/**", "**/*.map"]
//    includes = ["fonts/*", "node_modules/*", "lib/*"]
//    excludes = ["**/*.min.js", "**/*"]
}

def gitSha() {
    execOutput 'git rev-parse --short HEAD'
}

def gitTimestamp() {
    execOutput 'git log -n 1 --format=%at'
}

def gitBranch() {
    execOutput 'git rev-parse --abbrev-ref HEAD'
}

String execOutput(String exec) {
    def p = exec.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        final text = p.errorStream.text
        logger.warn(text)
        return text
    }
    return p.text.trim()
}

def envProp(String name, defaultValue = 'UNKNOWN' ) {
    System.getenv(name) ?: System.getProperty(name) ?: (defaultValue instanceof Closure ? defaultValue() : defaultValue)?.toString()
}

processResources {
    filesMatching("**/*.yml") {
        filter(ReplaceTokens, tokens: [
                'info.build.ci' : envProp('CI', 'false'),
                'info.build.date' : new Date().toString(),
                'info.build.jdk' : envProp('TRAVIS_JDK_VERSION', System.getProperty('java.version')),
                'info.build.number' : envProp('TRAVIS_BUILD_NUMBER'),
                'info.git.branch' : envProp('TRAVIS_BRANCH', { gitBranch() }),
                'info.git.commit' : envProp('TRAVIS_COMMIT', { gitSha() }),
                'info.git.slug' : envProp('TRAVIS_REPO_SLUG'),
                'info.git.tag' : envProp('TRAVIS_TAG'),
                'info.git.timestamp' : gitTimestamp()
        ])
    }
}

publish {
    dependsOn assemble
}

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases' }"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.web
        }
    }
}

//node {
//    // Version of node to use.
//    version = '6.9.4'
//
//    // Version of npm to use.
//    npmVersion = '3.10.10'
//
//    // Version of Yarn to use.
//    yarnVersion = '0.16.1'
//
//    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'
//
//    // If true, it will download node using above parameters.
//    // If false, it will try to use globally installed node.
//    download = false
//
//    // Set the work directory for unpacking node
//    workDir = file("${project.buildDir}/nodejs")
//
//    // Set the work directory for NPM
//    npmWorkDir = file("${project.buildDir}/npm")
//
//    // Set the work directory for Yarn
//    yarnWorkDir = file("${project.buildDir}/yarn")
//
//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/grails-app/assets")
//}